The rgb function is incomplete. Complete it so that passing in RGB decimal values will result in a hexadecimal representation being returned. 
Valid decimal values for RGB are 0 - 255. Any values that fall out of that range must be rounded to the closest valid value.
====================================================
function hexN(n){
  if(n > 255) n = 255;
  if(n < 0) n = 0;
  if(n == 0) return "00"
  
  
  let now = n;
  const arr = []
  
  while(now > 0){
    const num = now%16
    arr.push(num)
    now =  Math.floor(now/16)
  }
  
  let hex = []
  if(arr.length == 1){
      hex = arr.map(s =>  s <10 ? '0'+ s : (s == 10? '0A': (s == 11? '0B':(s==12? '0C':(s==13? '0D':(s==14? '0E': (s == 15? 'F': 'X')))))))
  }else{
      hex = arr.map(s =>  s <10 ? s : (s == 10? 'A': (s == 11? 'B':(s==12? 'C':(s==13? 'D':(s==14? 'E': (s == 15? 'F': 'X')))))))

  }
  
  return hex.reverse().join('')
}

function rgb(r, g, b){
  const r_value = hexN(r);
  const g_value = hexN(g);
  const b_value = hexN(b);
  
  return r_value.concat(g_value, b_value)
}
